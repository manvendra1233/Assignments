@Service
@Transactional
public class UserService implements IUserService {
    @Autowired
    private UserRepository repository;
 
    @Autowired
    private VerificationTokenRepository tokenRepository;
 
    @Override
    public User registerNewUserAccount(UserDto accountDto) 
      throws NameExistsException {
         
        if (nameExist(accountDto.getName())) {
            throw new NameExistsException(
              "There is an account with that name : "
              + accountDto.getName());
        }
         
        User user = new User();
        user.setName(accountDto.getName());
        user.setEmail(accountDto.getEmail());
        user.setPincode(accountDto.getPincode());
        return repository.save(user);
    }
 
    private boolean nameExist(String name) {
        User user = repository.findByName(name);
        if (user != null) {
            return true;
        }
        return false;
    }
     
    @Override
    public User getUser(String verificationToken) {
        User user = tokenRepository.findByToken(verificationToken).getUser();
        return user;
    }
     
    @Override
    public VerificationToken getVerificationToken(String VerificationToken) {
        return tokenRepository.findByToken(VerificationToken);
    }
     
    @Override
    public void saveRegisteredUser(User user) {
        repository.save(user);
    }
     
    @Override
    public void createVerificationToken(User user, String token) {
        VerificationToken myToken = new VerificationToken(token, user);
        tokenRepository.save(myToken);
    }
}